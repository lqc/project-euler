;; Solution to Project Euler problem 12
;; http://projecteuler.net/index.php?section=problems&id=12
;;
;; The sequence of triangle numbers is generated by adding the natural numbers.
;; So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
;; The first ten terms would be:
;;
;; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
;;
;; Let us list the factors of the first seven triangle numbers:
;;
;;  1: 1
;;  3: 1,3
;;  6: 1,2,3,6
;; 10: 1,2,5,10
;; 15: 1,3,5,15
;; 21: 1,3,7,21
;; 28: 1,2,4,7,14,28
;; We can see that 28 is the first triangle number to have over five divisors.
;;
;; What is the value of the first triangle number to have over five hundred divisors?
(ns com.stepniowski.euler-012)

(defn triangle-numbers
  "Returns the infinite sequence of triangle numbers."
  []
  (let [col (iterate (fn [[it number]] [(inc it) (+ number it)]) [2 1])]
    (map #(get % 1) col)))

(defn divisible-by? [n candidate]
  (zero? (rem n candidate)))

(defn prime-factors
  "Returns the prime factors of number num."
  [num]
  (let [q (Math/sqrt num)]
    (loop [n num
	   d 2
	   result []]
      (cond
       (> d q) (conj result n)
       (= n d) (conj result n)
       (divisible-by? n d) (recur (/ n d) d (conj result d))
       :else (recur n (inc d) result)))))

(defn count-runs
  "Given the sequence coll return the lengths of sequences with same values"
  [coll]
  (map #(count %) (partition-by identity coll)))

(defn divisor-count
  "Count of divisors of n.

  If n = p_1^k_1 + p_2^k_2 + ... + p_n^k_n, where p_i - prime
  the count of its divisors is (k_1 + 1) * (k_2 + 1) * ... * (k_n + 1)."
  [n]
  (let [prime-divisor-counts (count-runs (prime-factors n))]
    (reduce * (map inc prime-divisor-counts))))

(defn solution []
  (first (drop-while #(<= (divisor-count %) 500) (triangle-numbers))))
